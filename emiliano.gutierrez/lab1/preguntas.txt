
1. El toolchain de AVR compone los siguientes paquetes>
    * Compilador de C cruzado para AVR
    * Herramientas binutils para AVR (el ensamblador y el linker por ejemplo)
    * Bibliotecas de C para AVR y sus encabezados (headers)  

3. Al realizar "file led-test" se obtiene lo siguiente:
led-test: ELF 32-bit LSB executable, Atmel AVR 8-bit, version 1 (SYSV), statically linked, with debug_info, not stripped

    Vemos que efectivamente es un arachivo ejecutable para la arquitectura correcta (AVR)
    
4. Los binutils se instalan en: usr/bin

5. Los encabezados los encuentro en: /usr/lib/avr/include/avr
Las bibliotecas las encuentro en: /usr/lib/avr/lib

6. El compilador avr-gcc se instalo en: /usr/bin/avr-gcc

7.
a. Me pare sobre la carpeta de led_blink y corri el siguiente comando:
   avr-objdump -d led-test
   
   El resultado arrojado fue el siguiente:
    
led-test:     formato del fichero elf32-avr


Desensamblado de la secci√≥n .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8e:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <esperar>:
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <esperar+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <esperar+0x8>
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	19 82       	std	Y+1, r1	; 0x01
  a4:	1a 82       	std	Y+2, r1	; 0x02
  a6:	1b 82       	std	Y+3, r1	; 0x03
  a8:	1c 82       	std	Y+4, r1	; 0x04
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	9a 81       	ldd	r25, Y+2	; 0x02
  ae:	ab 81       	ldd	r26, Y+3	; 0x03
  b0:	bc 81       	ldd	r27, Y+4	; 0x04
  b2:	88 3e       	cpi	r24, 0xE8	; 232
  b4:	9e 46       	sbci	r25, 0x6E	; 110
  b6:	a3 40       	sbci	r26, 0x03	; 3
  b8:	b1 05       	cpc	r27, r1
  ba:	60 f4       	brcc	.+24     	; 0xd4 <esperar+0x3e>
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	ab 81       	ldd	r26, Y+3	; 0x03
  c2:	bc 81       	ldd	r27, Y+4	; 0x04
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	a1 1d       	adc	r26, r1
  c8:	b1 1d       	adc	r27, r1
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	ab 83       	std	Y+3, r26	; 0x03
  d0:	bc 83       	std	Y+4, r27	; 0x04
  d2:	eb cf       	rjmp	.-42     	; 0xaa <esperar+0x14>
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <led_init>:
  e2:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PORTB>
  e6:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PORTB+0x1>
  ea:	80 81       	ld	r24, Z
  ec:	8f 7d       	andi	r24, 0xDF	; 223
  ee:	80 83       	st	Z, r24
  f0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DDRB>
  f4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DDRB+0x1>
  f8:	80 81       	ld	r24, Z
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <led_on>:
 100:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PORTB>
 104:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PORTB+0x1>
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <led_off>:
 10e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PORTB>
 112:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PORTB+0x1>
 116:	10 82       	st	Z, r1
 118:	08 95       	ret

0000011a <main>:
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	2c 97       	sbiw	r28, 0x0c	; 12
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	0e 94 71 00 	call	0xe2	; 0xe2 <led_init>
 132:	01 e0       	ldi	r16, 0x01	; 1
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	1a 83       	std	Y+2, r17	; 0x02
 138:	09 83       	std	Y+1, r16	; 0x01
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	9a 81       	ldd	r25, Y+2	; 0x02
 13e:	44 97       	sbiw	r24, 0x14	; 20
 140:	80 f4       	brcc	.+32     	; 0x162 <main+0x48>
	...
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	ec cf       	rjmp	.-40     	; 0x13a <main+0x20>
 162:	1c 83       	std	Y+4, r17	; 0x04
 164:	0b 83       	std	Y+3, r16	; 0x03
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	9c 81       	ldd	r25, Y+4	; 0x04
 16a:	44 97       	sbiw	r24, 0x14	; 20
 16c:	80 f4       	brcc	.+32     	; 0x18e <main+0x74>
	...
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	9c 81       	ldd	r25, Y+4	; 0x04
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	9c 83       	std	Y+4, r25	; 0x04
 18a:	8b 83       	std	Y+3, r24	; 0x03
 18c:	ec cf       	rjmp	.-40     	; 0x166 <main+0x4c>
 18e:	1e 83       	std	Y+6, r17	; 0x06
 190:	0d 83       	std	Y+5, r16	; 0x05
 192:	8d 81       	ldd	r24, Y+5	; 0x05
 194:	9e 81       	ldd	r25, Y+6	; 0x06
 196:	44 97       	sbiw	r24, 0x14	; 20
 198:	80 f4       	brcc	.+32     	; 0x1ba <main+0xa0>
	...
 1ae:	8d 81       	ldd	r24, Y+5	; 0x05
 1b0:	9e 81       	ldd	r25, Y+6	; 0x06
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	9e 83       	std	Y+6, r25	; 0x06
 1b6:	8d 83       	std	Y+5, r24	; 0x05
 1b8:	ec cf       	rjmp	.-40     	; 0x192 <main+0x78>
 1ba:	0e 94 80 00 	call	0x100	; 0x100 <led_on>
 1be:	18 87       	std	Y+8, r17	; 0x08
 1c0:	0f 83       	std	Y+7, r16	; 0x07
 1c2:	8f 81       	ldd	r24, Y+7	; 0x07
 1c4:	98 85       	ldd	r25, Y+8	; 0x08
 1c6:	44 97       	sbiw	r24, 0x14	; 20
 1c8:	80 f4       	brcc	.+32     	; 0x1ea <main+0xd0>
	...
 1de:	8f 81       	ldd	r24, Y+7	; 0x07
 1e0:	98 85       	ldd	r25, Y+8	; 0x08
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	98 87       	std	Y+8, r25	; 0x08
 1e6:	8f 83       	std	Y+7, r24	; 0x07
 1e8:	ec cf       	rjmp	.-40     	; 0x1c2 <main+0xa8>
 1ea:	1a 87       	std	Y+10, r17	; 0x0a
 1ec:	09 87       	std	Y+9, r16	; 0x09
 1ee:	89 85       	ldd	r24, Y+9	; 0x09
 1f0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f2:	44 97       	sbiw	r24, 0x14	; 20
 1f4:	80 f4       	brcc	.+32     	; 0x216 <main+0xfc>
	...
 20a:	89 85       	ldd	r24, Y+9	; 0x09
 20c:	9a 85       	ldd	r25, Y+10	; 0x0a
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	9a 87       	std	Y+10, r25	; 0x0a
 212:	89 87       	std	Y+9, r24	; 0x09
 214:	ec cf       	rjmp	.-40     	; 0x1ee <main+0xd4>
 216:	1c 87       	std	Y+12, r17	; 0x0c
 218:	0b 87       	std	Y+11, r16	; 0x0b
 21a:	8b 85       	ldd	r24, Y+11	; 0x0b
 21c:	9c 85       	ldd	r25, Y+12	; 0x0c
 21e:	44 97       	sbiw	r24, 0x14	; 20
 220:	80 f4       	brcc	.+32     	; 0x242 <main+0x128>
	...
 236:	8b 85       	ldd	r24, Y+11	; 0x0b
 238:	9c 85       	ldd	r25, Y+12	; 0x0c
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	9c 87       	std	Y+12, r25	; 0x0c
 23e:	8b 87       	std	Y+11, r24	; 0x0b
 240:	ec cf       	rjmp	.-40     	; 0x21a <main+0x100>
 242:	0e 94 87 00 	call	0x10e	; 0x10e <led_off>
 246:	77 cf       	rjmp	.-274    	; 0x136 <main+0x1c>

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>

b.
Parado sobre la misma carpeta que el inciso a. corri el siguiente comando:
    avr-size led-test

El resultado es el siguiente:

    text	   data	    bss	    dec	    hex	filename
     588	      6	      0	    594	    252	led-test

La seccion codigo utiliza 588 bytes y la seccion datos utiliza 6 bytes.

8. No, main no es la primera seccion de codigo que se ejecuta. main se ejecuta
mucho mas adelante, arrancando en la direccion 0000011a. Las funciones anteriores
son las definiciones de interrupciones y de las funciones auxiliares que son 
utilizas por main().
